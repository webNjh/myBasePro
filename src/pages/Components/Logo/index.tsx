import React, { useMemo, useState } from 'react';
import { Button } from 'antd';
import classnames from 'classnames';
import styles from './index.module.less';

// , background: 'red'
const points = [
  '40.22% 62.75%, 40.66% 61.98%, 41.00% 64.78%', // 0
  '41% 64.78%, 42.11% 64.40%, 42.62% 67.2%', // 1
  '39.82% 61.12%, 39.96% 59.04%, 40.22% 62.75%', // 2
  '39.60% 58.32%, 39.96% 59.04%, 39.82% 61.12%', // 3
  '39.96% 59.04%, 40.66% 61.98%, 40.22% 62.75%', // 4
  '40.66% 61.98%, 42.11% 64.40%, 41% 64.78%', // 5
  '42.62% 67.2%, 42.11% 64.4%, 44.11% 68.24%', // 6
  '39.6% 58.32%, 39.96% 56.46%, 39.96% 59.04%', // 7
  '39.96% 59.04%, 40.99% 60.41%, 40.66% 61.98%', // 8
  '40.66% 61.98%, 41.68% 61.68%, 42.11% 64.40%', // 9
  '42.11% 64.4%, 44.11% 65.61%, 44.11% 68.24%', // 10
  '44.11% 68.24%, 45.68% 66.41%, 45.59% 68.42%', // 11
  '39.6% 58.32%, 39.61% 56.39%, 39.96% 56.46%', // 12
  '39.96% 56.46%, 40.32% 57.76%, 39.96% 59.04%', // 13
  '39.96% 59.04%, 40.32% 57.76%, 40.56% 59.05%', // 14
  '39.96% 59.04%, 40.56% 59.05%, 40.99% 60.41%', // 15
  '40.66% 61.98%, 40.99% 60.41%, 41.68% 61.68%', // 16
  '44.11% 68.24%, 44.11% 65.61%, 45.68% 66.41%', // 17
  '45.59% 68.42%, 45.68% 66.41%, 47.38% 68.01%', // 18
  '39.84% 54.64%, 40.06% 54.65%, 39.61% 56.39%', // 19
  '39.61% 56.39%, 40.06% 54.65%, 39.96% 56.46%', // 20
  '39.84% 54.64%, 40.14% 53.43%, 40.06% 54.65%', // 21
  '40.06% 54.65%, 40.26% 55.91%, 39.96% 56.46%', // 22
  '39.96% 56.46%, 40.26% 55.91%, 40.32% 57.76%', // 23
  '40.06% 54.65%, 40.14% 53.43%, 40.27% 54.49%', // 24
  '40.06% 54.65%, 40.27% 54.49%, 40.26% 55.91%', // 25
  '40.14% 53.43%, 40.56% 52.1%, 40.26% 54.38%', // 26
  '41.68% 61.68%, 42.97% 62.75%, 42.11% 64.4%', // 27
  '40.26% 54.38%, 40.56% 52.1%, 41.55% 55.91%', // 28
  '40.26% 54.38%, 41.55% 55.91%, 40.26% 55.91%', // 29
  '40.26% 55.91%, 41.55% 55.91%, 40.32% 57.76%', // 30
  '40.32% 57.76%, 41.55% 55.91%, 40.56% 59.05%', // 31
  '40.56% 59.05%, 41.55% 55.91%, 41.78% 59.60%', // 32
  '40.56% 59.05%, 42.74% 60.02%, 40.99% 60.41%', // 33
  '40.99% 60.41%, 42.74% 60.02%, 41.68% 61.68%', // 34
  '41.68% 61.68%, 42.74% 60.02%, 43.34% 61.68%', // 35
  '41.68% 61.68%, 43.34% 61.68%, 42.97% 62.75%', // 36
  '42.11% 64.4%, 42.97% 62.75%, 44.58% 63.16%', // 37
  '42.11% 64.4%, 44.58% 63.16%, 44.11% 65.61%', // 38
  '44.11% 65.61%, 44.58% 63.16%, 45.68% 66.41%', // 39
  '45.68% 66.41%, 48.63% 66.98%, 47.38% 68.01%', // 40
  '44.58% 63.16%, 46.61% 62.88%, 45.68% 66.41%', // 41
  '46.61% 62.88%, 47.61% 65.08%, 45.68% 66.41%', // 42
  '45.68% 66.41%, 47.61% 65.08%, 48.63% 66.98%', // 43
  '41.55% 55.91%, 42.51% 58.35%, 41.78% 59.60%', // 44
  '41.78% 59.60%, 42.51% 58.35%, 42.74% 60.02%', // 45
  '42.97% 62.75%, 43.34% 61.68%, 44.58% 63.16%', // 46
  '46.61% 62.88%, 49.28% 63.87%, 47.61% 65.08%', // 47
  '47.61% 65.08%, 49.28% 63.87%, 48.63% 66.98%', // 48
  '48.63% 66.98%, 49.28% 63.87%, 49.9% 65.28%', // 49
  '49.28% 63.87%, 50.78% 62.76%, 49.9% 65.28%', // 50
  '40.56% 52.1%, 41.3% 50.4%, 41.55% 55.91%', // 51
  '41.3% 50.4%, 42.26% 51.63%, 41.55% 55.91%', // 52
  '41.55% 55.91%, 42.26% 51.63%, 42.76% 55.91%', // 53
  '41.55% 55.91%, 42.76% 55.91%, 42.51% 58.35%', // 54
  '42.26% 51.63%, 43.25% 54.34%, 42.76% 55.91%', // 55
  '46.61% 62.88%, 47.62% 61.87%, 49.28% 63.87%', // 56
  '41.3% 50.4%, 42.26% 49.08%, 42.26% 51.63%', // 57
  '42.26% 49.08%, 43.28% 48.12%, 42.26% 51.63%', // 58
  '42.26% 51.63%, 43.77% 49.97%, 43.25% 54.34%', // 59
  '47.62% 61.87%, 48.53% 59.47%, 49.28% 63.87%', // 60
  '49.28% 63.87%, 51.54% 59.46%, 50.78% 62.76%', // 61
  '42.26% 51.63%, 43.28% 48.12%, 43.77% 49.97%', // 62
  '43.25% 54.34%, 43.77% 49.97%, 44.06% 53.3%', // 63
  '43.77% 49.97%, 44.92% 52.67%, 44.06% 53.3%', // 64
  '48.53% 59.47%, 50.04% 59.47%, 49.28% 63.87%', // 65
  '50.04% 59.47%, 51.54% 59.46%, 49.28% 63.87%', // 66
  '43.28% 48.12%, 43.95% 47.67%, 43.77% 49.97%', // 67
  '43.77% 49.97%, 46.06% 52.67%, 44.92% 52.67%', // 68
  '43.95% 47.67%, 44.94% 47.29%, 43.77% 49.97%', // 69
  '43.77% 49.97%, 46.06% 49.97%, 46.06% 52.67%', // 70
  '44.94% 47.29%, 46.06% 47.29%, 43.77% 49.97%', // 71
  '43.77% 49.97%, 46.06% 47.29%, 46.06% 49.97%', // 72
  '48.53% 54.94%, 50.04% 54.94%, 48.53% 59.47%', // 73
  '48.53% 59.47%, 50.04% 54.94%, 50.04% 59.47%', // 74
  '50.04% 54.94%, 51.54% 59.46%, 50.04% 59.47%', // 75
  '50.04% 54.94%, 51.54% 54.94%, 51.54% 59.46%', // 76
  '46.06% 47.29%, 48.54% 47.29%, 46.06% 49.97%', // 77
  '46.06% 49.97%, 48.54% 52.67%, 46.06% 52.67%', // 78
  '48.53% 54.94%, 48.53% 50.43%, 50.04% 54.94%', // 79
  '50.04% 54.94%, 51.54% 50.43%, 51.54% 54.94%', // 80
  '50.04% 54.94%, 50.04% 50.43%, 51.54% 50.43%', // 81
  '46.06% 49.97%, 48.54% 47.29%, 48.54% 49.97%', // 82
  '46.06% 49.97%, 48.54% 49.97%, 48.54% 52.67%', // 83
  '48.53% 50.43%, 50.04% 50.43%, 50.04% 54.94%', // 84
  '48.53% 50.43%, 50.04% 45.85%, 50.04% 50.43%', // 85
  '50.04% 50.43%, 50.04% 45.85%, 51.54% 50.43%', // 86
  '48.53% 45.85%, 50.04% 45.85%, 48.53% 50.43%', // 87
  '50.04% 45.85%, 51.54% 45.85%, 51.54% 50.43%', // 88
  '51.54% 50.43%, 51.54% 52.67%, 53.85% 52.67%', // 89
  '48.53% 41.34%, 50.04% 45.85%, 48.53% 45.85%', // 90
  '50.04% 45.85%, 51.54% 41.34%, 51.54% 45.85%', // 91
  '51.54% 47.29%, 53.85% 47.29%, 51.54% 50.43%', // 92
  '51.54% 50.43%, 53.85% 50.43%, 53.85% 52.67%', // 93
  '48.53% 41.34%, 50.04% 41.34%, 50.04% 45.85%', // 94
  '50.04% 41.34%, 51.54% 41.34%, 50.04% 45.85%', // 95
  '51.54% 50.43%, 53.85% 47.29%, 53.85% 50.43%', // 96
  '53.85% 50.43%, 55.74% 52.44%, 53.85% 52.67%', // 97
  '48.53% 41.34%, 48.84% 38.48%, 50.43% 37.72%', // 98
  '50.04% 41.34%, 50.43% 37.72%, 51.54% 41.34%', // 99
  '53.85% 50.43%, 55.05% 47.29%, 55.87% 49.96%', // 100
  '53.85% 50.43%, 55.87% 49.96%, 55.74% 52.44%', // 101
  '48.53% 41.34%, 50.43% 37.72%, 50.04% 41.34%', // 102
  '50.43% 37.72%, 51.61% 39.22%, 51.54% 41.34%', // 103
  '53.85% 47.29%, 55.05% 47.29%, 53.85% 50.43%', // 104
  '55.74% 52.44%, 55.87% 49.96%, 56.71% 51.87%', // 105
  '48.84% 38.48%, 49.48% 36.38%, 50.43% 37.72%', // 106
  '51.61% 39.22%, 51.99% 39.12%, 51.54% 41.34%', // 107
  '49.48% 36.38%, 50.39% 34.48%, 50.43% 37.72%', // 108
  '50.43% 37.72%, 51.87% 37.44%, 51.61% 39.22%', // 109
  '51.61% 39.22%, 51.87% 37.44%, 51.99% 39.12%', // 110
  '55.05% 47.29%, 58.22% 47.66%, 55.87% 49.96%', // 111
  '55.87% 49.96%, 58.22% 50.39%, 56.71% 51.87%', // 112
  '55.87% 49.96%, 58.22% 47.66%, 58.22% 50.39%', // 113
  '58.22% 47.66%, 58.92% 49.22%, 58.22% 50.39%', // 114
  '51.87% 37.44%, 52.45% 38.22%, 51.99% 39.12%', // 115
  '50.43% 37.72%, 50.93% 33.59%, 51.87% 35.15%', // 116
  '50.39% 34.48%, 50.93% 33.59%, 50.43% 37.72%', // 117
  '50.43% 37.72%, 51.87% 35.15%, 51.87% 37.44%', // 118
  '55.05% 47.29%, 56.91% 45.39%, 58.22% 47.66%', // 119
  '58.22% 47.66%, 59.59% 47.57%, 58.92% 49.22%', // 120
  '51.87% 37.44%, 52.72% 35.05%, 52.45% 38.22%', // 121
  '51.87% 35.15%, 52.90% 32.88%, 51.87% 37.44%', // 122
  '51.87% 37.44%, 52.90% 32.88%, 52.72% 35.05%', // 123
  '52.72% 35.05%, 53.11% 37.34%, 52.45% 38.22%', // 124
  '50.93% 33.59%, 52.90% 32.88%, 51.87% 35.15%', // 125
  '56.91% 45.39%, 58.95% 44.12%, 58.22% 47.66%', // 126
  '58.22% 47.66%, 60.15% 45.38%, 59.59% 47.57%', // 127
  '58.95% 44.12%, 60.15% 45.38%, 58.22% 47.66%', // 128
  '56.91% 45.39%, 57.49% 43.13%, 58.95% 44.12%', // 129
  '50.93% 33.59%, 52.78% 31.92%, 52.90% 32.88%', // 130
  '52.90% 32.88%, 53.84% 33.38%, 52.72% 35.05%', // 131
  '52.72% 35.05%, 53.84% 33.38%, 53.11% 37.34%', // 132
  '53.11% 37.34%, 54.16% 34.73%, 54.03% 36.81%', // 133
  '53.84% 33.38%, 55.04% 32.55%, 53.11% 37.34%', // 134
  '54.16% 34.73%, 55.48% 34.73%, 54.03% 36.81%', // 135
  '52.90% 32.88%, 54.53% 31.48%, 53.84% 33.38%', // 136
  '54.03% 36.81%, 55.48% 34.73%, 55.03% 36.81%', // 137
  '57.49% 43.13%, 57.49% 41.33%, 58.95% 44.12%', // 138
  '52.78% 31.92%, 54.53% 31.48%, 52.90% 32.88%', // 139
  '54.53% 31.48%, 55.04% 32.55%, 53.84% 33.38%', // 140
  '55.04% 32.55%, 55.48% 34.73%, 54.16% 34.73%', // 141
  '55.03% 36.81%, 55.48% 34.73%, 56.02% 37.42%', // 142
  '54.53% 31.48%, 55.42% 31.6%, 55.04% 32.55%', // 143
  '58.95% 44.12%, 60.41% 42.92%, 60.15% 45.38%', // 144
  '58.95% 44.12%, 59.27% 39.77%, 60.41% 40.22%', // 145
  '55.04% 32.55%, 55.42% 31.6%, 56.72% 32.27%', // 146
  '55.48% 34.73%, 56.72% 32.27%, 57.93% 33.48%', // 147
  '55.48% 34.73%, 57.94% 36.63%, 56.02% 37.42%', // 148
  '56.02% 37.42%, 57.94% 36.63%, 56.91% 38.97%', // 149
  '56.91% 38.97%, 59.27% 39.77%, 57.49% 41.33%', // 150
  '55.04% 32.55%, 56.72% 32.27%, 55.48% 34.73%', // 151
  '58.95% 44.12%, 60.41% 40.22%, 60.41% 42.92%', // 152
  '57.49% 41.33%, 59.27% 39.77%, 58.95% 44.12%', // 153
  '55.48% 34.73%, 57.93% 33.48%, 57.94% 36.63%', // 154
  '59.27% 39.77%, 59.9% 37.73%, 60.41% 40.22%', // 155
  '56.91% 38.97%, 57.94% 36.63%, 59.27% 39.77%', // 156
  '57.93% 33.48%, 58.95% 35.08%, 57.94% 36.63%', // 157
  '57.94% 36.63%, 58.95% 35.08%, 59.27% 39.77%', // 158
  '58.95% 35.08%, 59.9% 37.73%, 59.27% 39.77%', // 159
];

const greenIndex = [
  89, 92, 93, 96, 97, 100, 101, 104, 105, 107, 110, 111, 112, 113, 114, 115, 119, 120, 121, 124, 126, 127,
  128, 129, 132, 133, 134, 135, 137, 138, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155,
  156, 157, 158, 159
];

const triangles = points.map((d, i) => {
  if (!d) {
    return {}
  }
  if (greenIndex.includes(i)) {
    return {
      clipPath: `polygon(${d})`,
      backgroundColor: '#67B42B'
    }
  } return {
    clipPath: `polygon(${d})`,
  }
})

function Logo() {
  const [middleToggle, setMiddleToggle] = useState(false);
  const circle = useMemo(() => {
    const a = points.map((d) => {
      if (!d) {
        return null;
      }
      const totalPoint: any = [];
      const pointArr = d.split(', ');
      pointArr.forEach((v) => {
        totalPoint.push(v.split(' '));
      })

      return totalPoint;
    })
    
    // 三角形中心点坐标
    const centerPoint: any = [];
    a.forEach(d => {
      if (d) {
        const x = (parseFloat(d[0][0]) + parseFloat(d[1][0]) + parseFloat(d[2][0])) / 3;
        const y = (parseFloat(d[0][1]) + parseFloat(d[1][1]) + parseFloat(d[2][1])) / 3;
        centerPoint.push({ x, y });
      } else {
        centerPoint.push(null);
      }
    })
    // return centerPoint;
    
    // 三角形顶点坐标平铺
    const vs = new Map();
    a.forEach(d => {
      if (d) {
        d.forEach((v: any) => {
          if (!vs.get(v.join(','))) {
            vs.set(v.join(','), v)
          }
        })
      }
    })
    
    return { vertexPoints: Array.from(vs.values()), centerPoints: centerPoint };
  }, [])

  const onClick = () => {
    setMiddleToggle(true);
  }

  return (
    <div className={styles.logo}>
      {/* <div className={styles.logo_bg}></div> */}
      {
        triangles.map((d, i) => (
          <div 
            key={`${d?.clipPath + i}`} 
            className={classnames({
              [styles.logo_triangle]: true,
              [styles[`logo_triangle-${i + 1}`]]: true,
              [styles[`logo_middle-${i + 1}`]]: middleToggle,
            })} 
            style={d}
          />
        ))
      }
      {/* <svg style={{ width: 1920, height: 1080, position: 'absolute' }}> */}
        {/* 三角形中心点 */}
        {/* {
          circle.centerPoints.map((d: any, i: number) => {
            if (d) {
              return (
                <text 
                  key={`${d + i}`}
                  x={d.x / 100 * 1920}
                  y={d.y / 100 * 1080}
                  fill="white"
                  fontSize="2"
                  textAnchor="middle"
                  dominantBaseline="middle"
                >{i}</text>
              )
            } return null;
          })
        } */}
        {/* 三角形顶点 */}
        {/* {
          circle.vertexPoints.map((d: any, i: number) => {
            return (
              <circle 
                key={`${d + i}`} 
                r={1} 
                cx={parseFloat(d[0]) / 100 * 1920} 
                cy={parseFloat(d[1]) / 100 * 1080} 
                fill="green" 
                fillOpacity={0.6} 
                stroke="none"
                onMouseEnter={() => { console.log(`${d[0]} ${d[1]}`) }}
                onMouseLeave={() => { console.log('出去了') }}
              />
            )
          })
        } */}
      {/* </svg> */}
      {/* 触发变化 */}
      <Button onClick={onClick}>变换</Button>
    </div>
  );
}

export default Logo;
